// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

	IN  inM[16],         // M value input  (M = contents of RAM[A])
	instruction[16], // Instruction for execution
	reset;           // Signals whether to re-start the current
	// program (reset==1) or continue executing
	// the current program (reset==0).

	OUT outM[16],        // M value output
	writeM,          // Write to M?
	addressM[15],    // Address in data memory (of M)
	pc[15];          // address of next instruction

	PARTS:
	// instruction layout: (1)11 a c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3
	// leftmost bit on = C-instruction
	// 'a' determines whether we use 'A' register or 'M', 0 is A
	// 'c1-6' - comparison
	// 'd1-3' - dest register
	// 'j1-3' - cmp cond, j1:< j2:= j3:>
	ARegister(in=inA, load=writeA, out=Aout, out[0..14]=addressM);
	DRegister(in=ALUout, load=writeD, out=Dout);

	// 'a' bit, 0->A, 1->M
	Mux16(a=Aout, b=inM, sel=instruction[12], out=ALUin);
	ALU(x=Dout, y=ALUin, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, out=outM, zr=ALUzr, ng=ALUng);

	// Process jmp (j1 j2 j3)
	And(a=ALUng, b=instruction[2], out=lessjmp); // j1
	And(a=ALUzr, b=instruction[1], out=eqjmp); // j2
	Or(a=ALUng, b=ALUzr, out=notgr);
	Not(in=notgr, out=gr);
	And(a=gr, b=instruction[0], out=grjmp); // j3
	Or(a=lessjmp, b=eqjmp, out=partjmp);
	Or(a=partjmp, b=grjmp, out=PCloadok);
	And(a=PCloadok, b=instruction[15], out=PCload); // only load if this is C-instruction
	Not(in=PCload, out=PCinc);

	// Process dest (d1 d2 d3)

	// load in A if either d1 or not C-instruction
	Not(in=instruction[15], out=notC);
	Or(a=instruction[5], b=notC, out=writeA);
	Mux16(a[0..14]=instruction[0..14], b=ALUout, sel=instruction[15], out=inA);

	And(a=instruction[4], b=instruction[15], out=writeD); // d2(D), only if C-instruction
	And(a=instruction[3], b=instruction[15], out=writeM); // d3(M), only if C-instruction

	PC(in=Aout, load=PCload, inc=PCinc, reset=reset, out[0..14]=pc);
}
